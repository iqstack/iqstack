#!/bin/sh
### BEGIN INIT INFO
# Provides:          {{ service_name }}
# Required-Start:    $local_fs $network $remote_fs $named
# Required-Stop:     $local_fs $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{ service_desc }}
# Description:       This file should be used to start and stop {{ service_name }}.
### END INIT INFO

{# Note: Add whatever run levels or other LSB options above that are needed for your service. #}

SERVICE_NAME={{ service_name }}
DAEMON={{ daemon }}
DAEMON_OPTS="{{ daemon_opts }}"
PIDFILE=/var/run/{{ service_name }}.pid

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$SERVICE_NAME ] && . /etc/default/$SERVICE_NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

start_service() {
  echo -n " * Starting $SERVICE_NAME... "
  start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_OPTS
  e=$?
  if [ $e -eq 1 ]; then
    echo "already running"
    return
  fi

  if [ $e -eq 255 ]; then
    echo "couldn't start :("
    exit 1
  fi

  echo "done"
}

stop_service() {
  echo -n " * Stopping $SERVICE_NAME... "
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $SERVICE_NAME
  e=$?
  if [ $e -eq 1 ]; then
    echo "not running"
    return
  fi

  # May have to have a last sanity check if daemon has any forks...
  # start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON

  rm -f $PIDFILE

  echo "done"

  # JMeter forks ApacheJmeter.jar off and the primary sometimes does not kill it so just force it and end.
  if [ 'pgrep -f jmeter' ]; then
    pkill -f $SERVICE_NAME
  fi
}

status_service() {
    printf "%-50s" "Checking $SERVICE_NAME..."
    if [ -f $PIDFILE ]; then
        PID=`cat $PIDFILE`
        if [ -z "`ps axf | grep ${PID} | grep -v grep`" ]; then
            printf "%s\n" "Process dead but pidfile exists"
            exit 1
        else
            echo "Running"
        fi
    else
        printf "%s\n" "Service not running"
        exit 3
    fi
}

case "$1" in
  status)
    status_service
    ;;
  start)
    start_service
    ;;
  stop)
    stop_service
    ;;
  restart)
    stop_service
    sleep 1
    start_service
    ;;
  *)
    echo "Usage: service $SERVICE_NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
